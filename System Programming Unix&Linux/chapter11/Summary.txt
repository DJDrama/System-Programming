03 메시지 큐
	- 파이프와 유사(파이프는 스트림 기반).
	- 메세지 큐(메시지(또는 패킷) 단위)
	- 각 메시지에는 메시지 유형(message type) 존재(수신 프로세스는 유형을 선택 가능)

	- 메시지 큐 식별자 생성: msgget(2)
		==================================================================
		#include <types.h>
		#include <sys/ipc.h>
		#include <sys/msg.h>

		int msgget(key_t key, int msgflg); // 메시지 큐 식별자를 리턴.
		==================================================================
		> key: 메시지 큐를 구별하는 키
			$ IPC_PRIVATE or ftok() 함수로 생성한 키 지정.
		
		> msglfg: 메시지 큐의 속성을 설정하는 플래그
			$ msgflg: 플래그와 접근 권한을 지정.
				# IPC_CREAT: 새로운 키면 식별자를 새로 생성.
				# IPC_EXCL: 이미 존재하는 키면 오류 발생.


			* 메시지 큐 식별자와 관련된 메시지 큐와 IPC 구조체가 새로 생성되는 경우
				1) key가 IPC_PRIVATE
				2) key가 IPC_PRIVATE이 아니며 key에 지정한 식별자와 관련된 다른 메시지 큐가 없고 플래그에 IPC_CREATE가 설정되어 있음.

				--> 위 두 경우가 아니면, msgget() 함수는 기존 메시지 큐의 식별자를 리턴.
				* IPC_CREAT와 IPC_EXCL이 msgflg에 둘 다 설정되어 있고 key와 관련된 메시지 큐가 이미 존재하면 오류 리턴.

		> 함수 수행 성공: 메시지 큐 식별자를 정수로 리턴.
		> 함수 수행 실패: -1 리턴.
			예) ==================================================================
			key_t key;
			int id;

			key = ftok("keyfile", 1);
			id = msgget(key, IPC_CREAT|0640);
			=====================================================================

	- 메세지 전송: msgsnd(2)
		==================================================================
		#include <sys/types.h>
		#include <sys/ipc.h>
		#include <sys/msg.h>

		int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
		==================================================================
		> msqid: msgget 함수로 생성한 메시지 큐 식별자
		> msgp: 메시지를 담고 있는 메시지 버퍼의 주소
		> msgsz: 메시지의 크기(0 ~ 시스템이 정한 최댓값)
		> msgflg: 블록모드(0) / 비블록 모드(IPC_NOWAIT);
			$ 메시지 큐가 가득 찬 경우
				# msgflg가 0: 기다린다.
				# msgflg가 IPC_NOWAIT: 기다리지 않고 바로 오류를 리턴.

		> 수행 성공
			$ msqid_ds 구조체의 항목에서 msg_qnum 값이 1 증가, msg_lspid는 msgsnd() 함수를 호출한 프로세스의 ID로 설정.
			$ msg_stime은 현재 시각으로 설정.
		> 수행 실패: -1 리턴, 메시지 전송하지 않음.


		* msgsnd() 함수는 msgget() 함수가 리턴한 메시지 큐(msqid)를 통해 크기가 msgsz인 메시지를 메시지 버퍼(msgp)에 담아 전송.
		* msgflg: 메시지 큐가 가득 찼을 때의 동작을 지정.

		(msgbuf 구조체)
			==================================================================
			struct msgbuf {
				long mtype;
				char mtext[1];
			}
			==================================================================
			$ mtype: 메시지 유형으로 양수를 지정.
			$ mtext: msgsnd() 함수의 msgsz로 지정한 크기의 버퍼로 메시지 내용이 저장됨.

	- 메시지 수신: msgrcv() 함수
		> 메시지 큐로 메시지 수신하는 데 사용.
		
		=================================================================================
		#include <sys/types.h>
		#include <sys/ipc.h>
		#include <sys/msg.h>

		ssize_t msgrcv(int msqid, void *msgp, size_t mssz, long msgtyp, int msgflg);
		=================================================================================
		> msqid: msgget() 함수로 생성한 메시지 큐 식별자
		> msgp: 메시지를 담고 있는 메시지 버퍼의 주소
		> msgsz: 메시지 버퍼의 크기
		> msgtyp: 읽어올 메시지의 유형
			$ 0: 메시지 큐의 가장 앞에 있는 메세지를 읽어온다.
			$ 양수: 메시지 큐에서 msgtyp로 지정한 유형과 같은 메시지를 읽어온다.
			$ 음수: 메시지 유형이 msgtyp로 지정한 값의 절댓값과 같거나 작은 메시지를 읽어온다.
		> msgflg: 블록모드(0) / 비블록 모드(IPC_NOWAIT)
			$ 0: 메시지 큐에 메세지가 올 때까지 기다린다.
			$ IPC_NOWAIT: 메시지 큐가 비었을 때 기다리지 않고 즉시 오류 리턴.
			(리눅스 커널 3.8부터 추가된 플래그)
				# MSG_COPY: 메시지 큐에서 메세지를 복사해오고 원본은 큐에 그대로 둔다. (IPC_NOWAIT와 같이 사용)
				# MSG_EXCEPT: msgtyp의 값이 양수일 때 msgtyp에서 지정한 유형과 다른 유형의 메세지 중 첫 번째 메세지를 가져온다.
				# MSG_NOERROR: 메세지가 msgsz에 지정한 바이트보다 크면 메세지 내용을 잘라낸다.

		> msgqid가 가리키는 메시지 큐에서 msgtyp이 지정하는 메시지를 읽어 msgp가 가리키는 메시지 버퍼에 저장.
		> 메시지 버퍼의 크기는 msgsz에 지정
		> msgflg는 메시지 큐가 비었을 때 어떻게 동작할 것인지 알려줌.

		> 수행 성공
			$ msqid_ds 구조체 항목에서 msg_qnum 값이 1 감소하고 msg_lrpid는 msgrcv() 함수를 호출한 프로세스의 ID로 설정된다.
			$ msg_rtime은 현재 시각으로 설정.
			$ 읽어온 메세지의 바이트 수를 리턴.

	- 메세지 제어: msgctl(2)
		> 메세지 큐를 제거하거나 상태 정보를 설정하고 읽어오는 메세지 큐에 대한 제어 기능을 수행.
		=================================================================================
		#include <sys/types.h>
		#include <sys/ipc.h>
		#include <sys/msg.h>

		int msgctl(int msqid, int cmd, struct msqid_ds *buf);
		=================================================================================
		> msqid: msgget() 함수로 생성한 메세지 큐 식별자
		> cmd: 수행할 제어 기능
			$ cmd의 종류에 따라 제어값을 제정하거나 읽어오는 데 사용.
				# IPC_STAT: 현재 메세지 큐의 정보를 buf로 지정한 메모리에 저장.
				# IPC_SET: 메세지 큐의 정보 중 msg_perm.uid, msg_perm.gid, msg_perm.mode, msg_qbytes 값을 세번째 인자로 지정한 값으로 변경.(root 권한이 있거나 유효한 사용자 ID인 경우에만 사용 가능, msg_qbytes는 root 권한이 있어야 변경 가능)
				# IPC_RMID: msqid로 지정한 메세지 큐를 제거, 관련 데이터 구조체 제거.
				# IPC_INFO: 리눅스에서만 사용 가능, 메세지 큐의 제한값을 buf에 지정. buf는 msginfo 구조체로 형 변환해야 함.
		> buf: 제어 기능에 사용되는 메세지 큐 구조체의 주소

		> 수행 성공: 0
		> 수행 실패: -1


04 공유 메모리
	- 공유메모리: 같은 메모리 공간을 2개 이상의 프로세스가 공유하는 것.
		* 데이터를 주고받을 수 있다.
		* 읽고 쓸 때 동기화가 필요하다.

	4.1) 공유 메모리 함수
		- shmget (공유 메모리 식별자 생성)
		
			> int shmget(key_t key, size_t size, int shmflg);
			
				* key: IPC_PRIVATE 또는 ftok() 함수로 생성한 키
					$ 공유 메모리 식별자와 관련된 공유 메모리와 데이터 구조체가 새로 생성되는 경우
						1) key가 IPC_PRIVATE
						2) key가 0이 아니며 다른 식별자와 관련되어 있지 않고, 플래그(msgflg)에 IPC_CREAT가 설정되어 있는 경우.
						=> 위 두가지 경우가 아니면 shmget() 함수는 기존 공유 메모리의 식별자를 리턴.
				
					$ 이미 공유된 메모리의 식별자를 읽어오는 것이라면 무시됨.

				* size: 공유할 메모리의 크기

				* shmflg: 공유 메모리의 속성을 지정하는 플래그
					$ IPC_CREAT, IPC_EXCL (man msgget으로 세부내용 확인하고 사용)

					(when shmflg is 0)
					$ If a shared memory identifier has already been created with key earlier, and the calling process of this shmget() has read and/or write  
					  permissions to it, then shmget() returns the associated shared memory identifier.
					$ If a shared memory identifier has already been created with key earlier, and the calling process of this shmget() does not have read and/or 
					  write permissions to it, then shmget() returns-1 and sets errno to EACCES.
					$ If a shared memory identifier has not been created with key earlier, then shmget() returns -1 and sets errno to ENOENT.

			> 공유 메모리 정보를 담고 있는 구조체: shmid_ds, sys/shm.h 파일에 정리되어 있다. (man shmctl으로 확인 가능)

				struct shmid_ds {
					struct ipc_perm msg_perm;     // IPC 공통 구조체(ipc_perm)다.
					size_t			shm_segsz;    // 공유 메모리 세그먼트의 크기를 바이트 단위로 나타낸다.
					time_t			shm_atime;    // 마지막으로 공유 메모리를 연결(shmat)한 시간.
					time_t			shm_dtime;    // 마지막으로 공유 메모리의 연결을 해제(shmdt)한 시간.
					time_t			shm_ctime;    // 마지막으로 공유 메모리의 접근 권한을 변경한 시간.
					pid_tt_t		shm_lpid;;    // 마지막으로 shmop 동작을 한 프로세스의 PID.
					pid_t 			shm_cpid;     // 공유 메모리를 생성한 프로세스의 PID.
					shmatt_t		shm_nattch;   // 공유 메모리를 연결하고 있는 프로세스의 개수.
					...
				}

			> 새로운 공유 메모리 식별자가 리턴할 때 구조체의 값들.
				* shm_perm.cuid, shm_perm.uid: 함수를 호출한 프로세스의 유효 사용자 ID로 설정한다.
				* shm_perm.cgid, shm_perm.gid: 함수를 호출한 프로세스의 유효 그룹 ID로 설정한다.
				* shm_perm.mode의 하위 9비트: msgflg 값의 하위 9비트로 설정한다.
				* shm_segsz: size 값으로 설정한다.
				* shm_lpid, shm_nattch, shm_atime, shm_dtime: 0으로 설정한다.
				* shm_ctime: 현재 시각으로 설정한다.

		
		- shmat: 공유 메모리 연결

			> 생성된 공유 메모리를 사용하려면 공유 메모리를 프로세스의 데이터 영역과 연결해야 한다.

			> void *shmat(int shmid, const void *shmaddr, int shmflg);

				* shmid: shmget() 함수로 생성한 공유 메모리 식별자
				
				* shmaddr: 공유 메모리를 연결할 주소
					$ 특별한 경우가 아니면 NULL을 지정한다.
					$ 값이 NULL이면 시스템이 알아서 적절한 주소에 공유 메모리를 연결한다.
					$ 만약 NULL이 아니고 shmflg에 SHM_RND가 지정되어 있으면 메모리는 SHMLBA의 가장 가까운 배수의 주소에 연결한다.
						=> SHMLBA는 메모리 세그먼트의 하위 경계 주솟값.
					$ 이외의 경우, 메모리 페이지 크기에 맞춰서 연결된다.

				* shmflg: 공유 메모리에 대한 읽기 / 쓰기 권한
					$ 0이면 공유 메모리에 대해 읽기 / 쓰기 가능.
					$ SHM_RDONLY면 읽기만 가능.
					$ SHM_EXEC면 공유된 메모리 세그먼트의 내용을 실행 가능.

				* 수행에 성공하면 연결된 공유 메모리의 시작 주소를 리턴한다.

		
		- shmdt: 공유 메모리 연결 해제

			> 해당 함수를 사용해 공유 메모리의 연결을 해제(공유 메모리의 사용이 끝날 시)

			> int shmdt(const void *shmaddr);

				* shmaddr: 연결을 해제할 공유 메모리의 시작 주소(시작 주소 = shmat() 함수의 리턴값).

		
		- shmctl: 공유 메모리 제어

			> int shmctl(int shmid, int cmd, struct shmid_ds *buf);

				* shmid: shmget() 함수로 생성한 공유 메모리 식별자.

				* cmd: 수행할 제어 기능.
					$ IPC_STAT
						~ 현재 공유 메모리의 정보를 buf로 지정한 메모리에 저장.
					
					$ IPC_SET
						~ 공유 메모리의 정보 중 shm_perm.uid, shm_perm.gid, shm_perm.mode 값을 세 번째 인자로 지정한 값으로 바꾼다. 
						  (root 권한이 있거나 유효 사용자 ID인 경우에만 사용 가능.)
					
					$ IPC_RMID
						~ shmid로 지정한 공유 메모리를 제거하고 관련된 데이터 구조체 제거.
					
					$ IPC_INFO
						~ 리눅스에서만 사용 가능. 공유 메모리의 시트템 제한값을 buf에 저장. buf는 shminfo 구조체로 형 변환을 해야한다.
						<shminfo 구조체(man shmctl에서 확인 가능)>
							struct shminfo {
								unsigned long shmmax; // 세그먼트의 최대 크기
								unsigned long shmmin; // 세그먼트의 최소 크기(항상 1)
								unsigned long shmmni; // 세그먼트의 최대 개수
								unsigned long shmseg; // 한 프로세스에 연결될 수 있는 세그먼트의 최대 개수
								unsigned long shmall; // 시스템 전체에서 공유 메모리로 사용할 수 있는 페이지의 최대 개수
							}

					$ SHM_INFO
						~ 리눅스에서만 사용 가능
						~ 공유 메모리가 사용하는 자원의 정보를 shm_info 구조체에 저장
						~ shm_info 구조체는 sys/shm.h 파일에 정의되어 있고 man shmctl로 확인 가능.

						struct shm_info {
							int 		  used_ids;        // 현재 생성된 세그먼트의 개수
							unsigned long shm_tot;		   // 공유 메모리 페이지의 전체 개수
							unsigned long shm_rss;		   // 사용 중인 공유 메모리 페이지의 개수
							unsigned long shm_swp;		   // 스왑된 공유 메모리 페이지의 개수
							unsigned long swap_attempts;   // 리눅스 2.4부터는 사용하지 않는다.
							unsigned long swap_successes;  // 리눅스 2.4부터는 사용하지 않는다.
						}

					$ SHM_LOCK
						~ 공유 메모리 세그먼트를 잠근다.

					$ SHM_UNLOCK
						~ 공유 메모리 세그먼트의 잠금을 해제한다.


				* buf: 제어 기능에 사용되는 공유 메모리 구조체의 주소.

			> 










