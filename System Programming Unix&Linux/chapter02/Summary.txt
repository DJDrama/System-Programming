[Chapter 02] 디렉터리 다루기

01. 개요
	- 리눅스에서는 디렉터리를 파일의 한 종류로 취급
	- 파일 : 장치를 구동하는 데 사용, 장치 관련 특수 파일을 다른 파일과 구분해 장치 파일(Device File)이라고도 한다
		$ 일반 파일(Regular File)
			# 텍스트 파일, 실행 파일 등 텍스트나 바이너리 형태의 데이터를 저장하고 있는 파일

		$ 특수 파일(Special File)

		$ 디렉터리(Directory)
			# 디렉터리에 속한 파일을 관리하는 특별한 파일

	- 리눅스에서 파일은 파일명, inode, 데이터 블록으로 구성된다.
		$ 파일명: 사용자가 파일에 접근할 때 사용
		$ inode: 외부적으로는 번호로 표시, 파일의 소유자나 크기 등의 정보와 실제 데이터를 저장하고 있는 데이터 블록의 위치를 나타내는 주소들이 저장되어 있다.
		$ 데이터 블록: 실제로 데이터가 저장되는 하드디스크의 공간

	- 리눅스에서 디렉터리
		$ 디렉터리에 속한 파일의 inode 번호와 이에 매핑된 파일명 목록이 들어 있다.
		$ 함수를 사용해 생성, 삭제 가능
			# 디렉터리 생성: int mkdir(const char *pathname, mode_t mode);
			# 디렉터리 삭제: int rmdir(const char *pathname);
		$ 자주 사용하는 기능
			# 현재 작업 디렉터리 위치 확인 : char *getcwd(char *buf, size_t size); || char *get_current_dir_name(void);
			# 디렉터리 이동: int rename(const char *oldpath, const char *newpath);
			# 디렉터리 변경: int chdir(const char *path); || int fchdir(int fd);
		$ 디렉터리: 하위 디렉터리나 파일의 목록을 가지고 있는 파일
			# 디렉터리 열기: DIR *opendir(const char *name);
			# 디렉터리 닫기: int closedir(DIR *dirp);
			# 디렉터리 내용 읽기: struct dirent *readdir(DIR *dirp);
			# 디렉터리 오프셋: long telldir(DIR *dirp); || void seekdir(DIR *dirp, long loc); || void rewinddir(DIR *dirp);

02. 리눅스 파일의 특징
	- 리눅스에서 파일
		$ 데이터 저장
		$ 장치 구동
		$ 프로세스 간 통신 등에 사용

	(2.1) 파일의 종류
		- 일반 파일, 특수 파일, 디렉터리로 구분

		- 일반 파일
			$ 텍스트 파일, 실행 파일, 라이브러리, 이미지 등 리눅스에서 사용하는 대부분의 파일
			$ 데이터 블록에 텍스트나 바이너리 형태의 데이터를 저장
			$ vi 같은 편집기를 사용해 만들기도 하고 컴파일러나 다른 응용 프로그램에서 생성 가능

		- 특수 파일
			$ 통신, 터미널 또는 디스크 등의 장치를 사용하려면 연관된 특수 파일 이용해야 한다.
			$ 특수 파일을 다른 파일과 구분해 "장치 파일"이라고도 한다.
				# 장치 파일은 데이터 블록을 사용하지 않음.
				# 대신 장치의 종류를 나타내는 장치 번호를 inode에 저장

			$ 장치 파일
				# 블록 장치(Block Device) 파일
					@ 블록 단위로 데이터를 읽고 쓴다. (리눅스 블록 크기: 1~8KB)
				# 문자 장치(Character Device) 파일
					@ 하드 디스크인 경우 섹터 단위로 읽고 쓰는데, 기본 크기는 512 bytes.
					@ 로우 디바이스(Raw Device)라고도 한다.
				# ls -l 입력 시, 일반 파일과 달리 10, 175(장치의 종류와 번호를 나타냄) 형태로 출력된다.
					@ 주 장치 번호(Major Device Number): 10은 장치의 종류
					@ 부 장치 번호(Minor Device Number): 175는 해당 장치의 개체 번호

				* 기본적인 장치 파일은 리눅스 설치 시 생성되며 추가로 장착하는 장치의 장치 파일은 장치 추가 절차에 따라 생성된다.

		- 디렉터리
			$ 디렉터리 또한 파일로 취급
			$ 디렉터리와 연관된 데이터 블록은 해당 디렉터리에 속한 파일의 목록과 inode를 저장

		- 파일의 종류 구분
			$ ls -l 명령어를 통해 파일의 종류를 알 수 있다.
			$ 결과로 나온 첫 글자가 장치의 종류를 나타낸다.
				예) -rwxr-xr-x 1 root root 153976 9월 5 2019 /usr/bin/cp
				# - : 일반 파일
				# d : 디렉터리
				# b : 블록 장치 특수 파일
				# c : 문자 장치 특수 파일
				# l : 심벌릭 링크

	(2.2) 파일의 구성 요소
		- 리눅스 파일: 파일명, inode, 데이터 블록으로 구성
		- 파일명
			$ 파일에 접근할 때 사용, 파일명과 관련된 inode가 반드시 있어야 한다.
			$ 파일명이나 디렉터리명은 "/"와 "null" 문자를 제외하고 아무 문자 사용 가능
				# "/" : 디렉터리를 구분하는 문자
				# "null" : 경로 이름의 끝을 나타내는 문자
			* 출력이 가능한 문자를 사용하고, 혼동을 줄 수 있는 특수문자는 사용을 자제하자.
			* 파일명과 디렉터리 명에 사용하는 알파벳은 대소문자를 구분하자.
			* 파일명과 디렉터리명이 '.'으로 시작하면 숨김 파일로 간주한다.

		- inode
			$ 파일에 대한 정보를 저장하고 있는 객체 (실제로 디스크에 저장되어 있다)
			$ 리눅스 커널 입장: 파일의 정보를 관리하는 자료 구조로 사용.
			$ inode는 외부적으로 번호로 표현, 내부적으로는 두 부분으로 나누어 정보를 저장한다.
				1. 첫번째 부분: 파일에 관한 정보 저장
					--> 파일 종류, 파일 접근 권한, 파일 크기, 소유자, 소유 그룹, 팡리 변경 시각, 하드 링크 수, 데이터 블록 수 등
					--> ls -l 명령: inode의 정보를 읽어서 출력
				2. 두번째 부분: 파일의 실제 데이터가 저장되어 있는 데이터 블록의 위치를 나타내는 주소들이 저장된다.
					--> ls -i 명령: 파일의 inode 번호 확인

		- 데이터 블록
			- 실제로 데이터가 저장되는 하드 디스크의 공간
				$ 일반 파일, 디렉터리, 심벌릭 링크는 데이터 블록에 관련 내용 직접 저장
				$ 장치 파일은 데이터 블록 사용하지 않으며 장치에 관한 정보를 inode에 저장.


