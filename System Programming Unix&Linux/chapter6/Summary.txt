[프로세스 정보]

<03> 프로세스 식별
	* PID(Process Id): 프로세스를 식별하기 위한 Id
	* Process Group: 관련 프로세스가 모여 프로세스 그룹을 구성

	(3.1) PID 검색
		- PID는 0부터 시작
			$ 0번 프로세스
				# sched(스케줄러: 프로세스에 CPU 시간을 할당하는 역할)
				# 커널의 일부분이라 별도의 실행 파일은 없다.

			$ 1번 프로세스
				# init

		- 기존 PID와 중복되지 않은 번호가 할당됨.
		- getpid()
			======================================================================
			#include <sys/types.h>
			#include <unistd.h>

			pid_t getpid(void); // 이 함수를 호출한 프로세스의 PID를 리턴.
			======================================================================

		- 0번 프로세스를 제외한 모든 프로세스에는 자신을 생성한 프로세스가 존재(부모 프로세스).
		- ppid(Parent Process ID): 부모 프로세스의 PID

		- getppid()
			======================================================================
			#include <sys/types.h>
			#include <unistd.h>

			pid_t getppid(void); // 부모 프로세스의 pid를 검색
			======================================================================

	(3.2) 프로세스 그룹
		- 관련 있는 프로세스를 묶은 것
		- PGID(Process Group ID)를 부여 받는다.
		- 프로세스는 프로세스 그룹을 구성하는 멤버가 된다.
		- BSD 계열 유닉스에서 작업(Job) 제어를 구현하면서 도입.

		- 프로세스 그룹 리더
			$ 그룹을 구성하는 프로세스 중 하나가 리더가 됨.
			$ 리더의 PID가 PGID가 된다.
			$ 리더는 변경될 수 있다.
			$ 리더 프로세스가 변경되면 PGID도 변경된다.

		- PGID 검색: getpgrp(2), getpgid(2)
			======================================================================
			#include <unistd.h>
			#include <sys/types.h>

			pid_t getpgrp(void); // 이 함수를 호출하는 프로세스가 속한 그룹의 PGID를 리턴.
			pid_t getpgid(pid_t pid); // pid 인자로 지정한 프로세스가 속한 그룹의 PGID를 리턴(0 이면 함수 호출한 프로세스의 PID를 리턴)
			======================================================================

		- pgid 변경: setpgid(2)
			======================================================================
			#include <sys/types.h>
			#include <unistd.h>

			int setpgid(pid_t pid, pid_t pgid); // pid가 가리키는 프로세스의 pgid를 지정 값으로 지정.
			======================================================================
			$ pgid: 새로 지정할 pgid
			$ pid와 pgid가 같으면 pid에 해당하는 프로세스가 그룹 리더가 된다.
			$ pid가 0이면 이 함수를 호출하는 현재 프로세스의 pid를 사용.
			$ pgid가 0이면 pid로 지정한 프로세스가 pgid가 된다.

	(3.3) 세션
		- POSIX 표준에서 제안한 개념
		- 사용자가 로그인해 작업하고 있는 터미널 단위로 프로세스 그룹을 묶은 것.
		- 관련 있는 프로세스 그룹을 모은 개념

			{그림}
			터미널
			------------------------------------------------------------------------
				세션
				------------------------------------------------------------
				|	프로세스 그룹 1				  프로세스 그룹 2					|
				|	------------------------  ----------------------------  |
				|	|	pid 1(세션 리더, PGID)| |		pid 10(세션 리더, PGID) | |
				|	|	pid 2				| |		pid 11			      | |
				|	|	pid 3				| |						      | |
				|	------------------------  ----------------------------- |
				------------------------------------------------------------
			------------------------------------------------------------------------

		- 세션 검색: getsid(2)
			$ 세션에도 ID가 할당됨.
			$ 프로세스가 새로운 세션을 생성하면 해당 프로세스는 세션 리더(Session Leader)가 된다.
				--> PID는 세션 ID가 된다.

			======================================================================
			#include <sys/types.h>
			#include <unistd.h>

			pid_t getsid(pid_t pid);
			======================================================================
			$ pid로 지정한 프로세스가 속한 세션의 ID를 리턴.
			$ pid가 0이면 현재 프로세스의 세션 ID를 리턴.

		- 세션 생성: setsid(2)
			$ 함수 사용으로 새로운 세션 만들 수 있다.
			$ 함수를 호출하는 프로세스가 프로세스 그룹 리더가 아니면 새로운 세션을 만들어 세션 리더가 되고 새로운 세션에서 프로세스 그룹 리더가 된다.
			$ setsid() 함수를 호출한 프로세스가 새로운 세션과 프로세스 그룹의 유일한 프로세스가 된다.

			======================================================================
			#include <sys/types.h>
			#include <unistd.h>

			pid_t setsid(void);
			======================================================================
			$ 호출 성공: 새로운 세션 ID를 리턴
			$ 오류: -1 리턴.



