7. 스레딩
	(7.1) 바이너리, 프로세스, 스레드
		- 바이너리
			$ 저장장치에 기록되어 있는 프로그램
			$ 컴파일되어 실행할 준비가 된, 아직 실행되지는 않은 프로그램
		- 프로세스
			$ 실행된 바이너리를 표현하기 위한 운영체제의 추상 개념
			$ 메모리에 적재되고 가상화된 메로리와 열린 fd, 연관된 사용자와 같은 커널 리소스 등을 포함
		- 스레드
			$ 프로세스 내의 실행 단위
			$ 가상화된 프로세서, 스택, 프로그램 상태 포함

		* 프로세스: 실행 중인 바이너리
		* 스레드: 프로세스 스케줄러에 의해 스케줄링될 수 있는 최소한의 실행 단위

		- 싱글스레드: 프로세스의 스레드가 하나, 단일 실행 단위를 가지며 한 번에 하나만 실행
		- 멀티스레드: 하나의 프로세스가 하나 이상의 스레드를 포함, 한 번에 여러 개의 스레드 실행

		- 최신 운영체제 (두 가지 추상 개념 제공)
			1. 가상 메모리
			2. 가상 프로세서

		- 한 프로세스 내의 모든 스레드는 메모리를 서로 공유
		- 프로세스 내의 모든 스레드는 메모리 주소 공간 전체를 공유

	(7.2) 멀티스레딩
		- 멀티스레딩의 장점
			1. 프로그래밍 추상화
				- 작업을 나누고 각각 실행 단위로 할당
				- 디자인 패턴: 연결별 스레드, 스레드 풀 (안티패턴의 시각도 있음)
			2. 병렬성
				- 효과적인 병렬성 구현
			3. 응답속도 향상
				- 오래 실행되는 작업을 워커 스레드에 맡기고 최소한 하나의 스레드는 사용자의 입력에 대응해서 UI 작업 수행.
			4. 입출력 블록
				- 개별 스레드가 블록되어도 다른 스레드가 계속해서 진행 가능
				- 비동기식, 논블록 입출려
			5. 컨텍스트 스위칭
				- 같은 프로세스 내에서의 스레드 전환 비용은 프로세스 단위의 컨텍스트 스위칭 비용보다 훨씬 저렴하다
			6. 메모리 절약
				- 스레드는 메모리를 공유
		
		- 컨텍스트 스위칭
			$ 스레드 간 컨텍스트 스위칭 비용 높지 않음.
			$ 스레드: 경량 프로세스
			$ 프로세스 내 스레드 간의 컨텍스트 스위칭 비용: 커널 내부로 진입했다가 다시 빠져나오는 정도로 거의 0에 가까움.
			$ 프로세스 스위칭: 하나의 가상 주소 공간을 다른 것으로 바꾸는 과정으로 스레드가 감당할 수 없는 비용을 부과한다.

	(7.2.1) 멀티스레딩 비용
		- 스레드의 단점: 가상화된 프로세서는 복수인데 가상 메모리는 하나(스데르의 존애 이유인 동시에 단점)
			$ 멀티스레드 프로세스는 동시에 여러 가지 일을 할 수 있지만 같은 메모리에 공유해야 한다.
			$ 예측할 수 없는 시점과 순서로 각 스레드가 독립적으로 실행되면서도 올바르게 동작하는지를 이해해야 함.
			$ 스레드 동기화에 실패하면 결과가 뒤죽박죽, 실행이 잘못되거나, 프로그램이 죽을 수 있다.

	(7.2.2) 멀티스레딩 대안
		- 제대로 된 병렬화 목표: N개의 프로세스를 N개의 스레드처럼 프로세서를 이용하도록 하고, 약간의 리소스 사용과 컨텍스트 스위칭 비용의 오버헤드 감수를 통한 해결
		- 메모리 절약 목표: 스레드보다 더 제한된 방식으로 메모리 공유할 수 있는 도구 사용

	(7.3) 스레딩 모델
		- 커널 레벨 스레딩
			$ 1:1 스레딩: 커널이 제공하는 스레드와 사용자가 사용하는 스레드가 1:1의 관계
		* 리눅스에서의 스레딩 = 1:1 스레딩 --> 사용자 영역에서 스레드라고 부르는 것은 커널에서 스레드라고 부르는 것과 동일.

	(7.3.1) 사용자 레벨 스레딩
		- 사용자 레벨 스레딩
			$ N:1 스레딩	(스레드가 N개인 하나의 프로세스)
				# 커널 지원을 거의 필요로 하지 않거나, 커널 지원 없이 스레드를 관리하는 사용자 영역 스케줄러와 논블록킹 방식으로 입출력을 처리하는 메커니즘 등 상당한 부분을 사용자 영역 코드로 구현.
			$ 사용자 영역이 시스템의 스레딩 지원의 핵심
			$ 커널의 관여 없이 스스로 스레드 실행으르 결정할 수 있으므로 컨텍스트 스위칭 비용이 거의 들지 않는 장점
			* 하나의 커널이 N개의 스레드를 떠받치고 있으므로 여러 개의 프로세서를 활용할 수 없고 제대로 된 병렬성을 제공할 수 없다.

	(7.3.2) 하이브리드 스레딩
		- N:M 하이브리드 스레딩
			$ 커널은 네이티브 스레드 개념 제공, 사용자 영역에서는 사용자 스레드 구현
			$ N>=M 일 때, 사용자 스레드 N개를 M개의 커널 스레드와 어떻게 맵핑할지를 결정.

	(7.3.3) 코루틴과 파이버
		- 코루틴과 파이버는 스레드보다 더 작은 실행 단위를 제공
			$ 코루틴: 프로그래밍 언어에서 사용
			$ 파이버: 시스템에서 사용
		- 스케줄링이나 실행을 위한 사용자 영역의 지원을 거의 필요로 하지 않음.
		- 동시성보다는 프로그램 흐름 제어에 관한 개념
		- 리눅스는 해당 지원이 없음: 이미 빠른 컨텍스트 스위칭 속도로 인해 커널 스레드의 성능을 극한까지 다듬을 필요가 없음.

	(7.4) 스레딩 패턴
		- 연결별 스레드, 이벤트 드리븐 스레드
	
	(7.4.1) 연결별 스레드
		- 하나의 작업이 스레드 하나에 할당됨
		- 작업이 완료될 때까지 실행하는 패턴
		- 연결(요청)이 스레드를 소유하므로 입출력 블록킹이 허용됨.
			$ 스레드가 블록되면 해당 블록킹을 유발한 연결만 멈춤.
			$ 작업 스케줄링과 입출력 관리에 커널을 사용
		- 스레딩에 관한 요구사항이 없다.

	(7.4.2) 이벤트 드리븐 스레딩
		- 모든 입출력은 비동기식으로 처리.
		- 프로세서보다 많은 수의 스레드를 사용하면 병렬성의 이점을 얻을 수 없다.
		- 프로세스 개수만큼 스데르르 사용하는 작은 스레드 풀을 고려해라.

	(7.5) 동시성, 병렬성, 경쟁 상태
		- 동시성: 둘 이상의 스레드가 특정 시간에 함께 실행되는 것을 의미
			$ 여러 개의 스레드가 함께 일을 처리하지만 반드시 동시에 해야 하는 것은 아님.
		- 병렬성: 둘 이상의 스레드가 동시에 실행되는 것
			$ 여러 개의 스레드가 동시에 실행되는 것.

	(7.5.1) 경쟁 상태
		- 스레드의 실행 순서를 예측할 수 없다.
		- 스레드가 서로 리소르르 공유한다면 문제가 된다.
		- 공유 리소스에 동기화되지 않은 둘 이상의 스레드가 접근하여 프로그램의 오동작을 유발하는 상황
			$ 공유 리소스: 시스템의 하드웨어, 커널 리소스, 메모리에 있는 데이터 등
		- 크리티컬 섹션: 반드시 동기화가 되어야 하는 영역 --> 경쟁 상태 제거

	(7.6) 동기화
		- 상호 배제(Mutual Exclusion): 접근 동기화
		- 원자적(Atomic): 즉각적 연산 실행.

	(7.6.1) 뮤텍스
		- 락(LOCK): 크리티컬 섹션 안에서 상호 배제를 구현해서 원자적으로 만들기
		- 크리티컬 섹션으로 들어가기 전 락을 얻는다.
		- 한 번에 하나의 스레드만 락을 걸 수 있도록 되어 있다.
		- 다른 스레드가 락을 가지고 있다면 새로운 스레드는 작업을 계속하기 위해 락을 기다려야 한다.
		- 크리티컬 섹션 안에서 실행을 마치고 나면 락을 해제하고, 기다리던 스레드가 있다면 반환된 락을 얻고 실행을 계속한다.
		- lock(), unlock()

		* 락은 코드가 아닌 데이터에 걸어야 한다.

	(7.6.2) 데드락(교착 상태)
		- 스레드 사용하는 이유: 동시성
		- 두 스레드가 서로 상대방이 끝나기를 기다리고 있어서 결국엔 둘 다 끝나지 못하는 상태.
		- 두 스레드가 서로 상대 스레드가 가지고 있는 뮤텍스를 해제하기를 기다리고 있을 때 발생.

		- ABBA 데드락
			$ 한 스레드가 A 뮤텍스를 잡고 있는 상태에서 B 뮤텍스를 기다리고 있고, 다른 스레드는 B 뮤텍스를 잡고 A 뮤텍스를 기다리고 있는 데드락
		- 연인 데드락
			* 서로 상대방이 가지고 있는 뮤텍스를 기다리므로 뮤텍스는 해제되지 않고 스레드는 데드락에 빠짐

		* A 뮤텍스는 반드시 B 뮤텍스보다 먼저 얻어야 한다.

	(7.7) Pthread
		- Posix 스레드 = Pthread

	(7.7.2) Pthread API

	(7.7.3) Pthread 링크하기

	(7.7.4) 스레드 생성하기
		- main() 함수 실행 시점: 싱글스레드
		- 새로운 스레드 생성
			========================================================================
			#include <pthread.h>

			int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
			========================================================================
			$ 에러: 0이 아닌 에러 코드 직접 반환(errno 사용하지 않음)
			$ 스레드 속성: 스택 크기, 스케줄링 인자, 최초 디태치 상태 등 여러 가지 특성

		- start_routine
			========================================================================
			void * start_thread(void *arg);
			========================================================================
		- fork()(부모 프로세스 리소스의 복사본을 가지는)와는 달리 스레드는 부모 스레드의 리소스를 공유한다.

	(7.7.5) 스레드 ID
		- TID(Thread ID)
		- pthread_self() 함수를 이용 자신의 TID를 얻어올 수 있다.
			========================================================================
			#include <pthread.h>

			pthread_t pthread_self(void); // const pthread_t me = pthread_self();
			========================================================================
			$ 실패하지 않는다.

		- 스레드 ID 비교
			========================================================================
			#include <pthread.h>

			int pthread_equal(pthread_t t1, pthread_t t2);
			========================================================================
			$ 동일하면 0이 아닌 값을 반환.
			$ 다르면 0 반환
			$ 실패하지 않는다.

	(7.7.6) 스레드 종료하기
		- 스레드 종료 상황
			1. start_routine 함수가 반환한 경우(main() 함수가 끝까지 실행된 상황과 비슷)
			2. pthread_exit() 함수를 호출한 경우(exit() 함수 호출한 경우 비슷)
			3. pthread_cancel() 함수를 통해 다른 스레드에서 중지시킨 경우에 종료(kill()을 통해 SIGKILL 시그널을 보낸 경우와 비슷)

		- 관계된 스레드 하나만 종료되는 상황 (프로세스 내 모든 스레드가 종료되어 그 프로세스도 종료된다.)
			1. 프로세스의 main() 함수가 반환
			2. 프로세스가 exit() 호출로 종료된 경우
			3. 프로세스가 execve() 호출로 새로운 바이너리를 실행한 경우

		- 스스로 종료하기
			========================================================================
			#include <pthread.h>

			void pthread_exit(void *retval); // pthread_exit(NULL);
			========================================================================
			$ 이 함수를 호출한 스레드가 종료된다.
			$ retval: 그 프로세스가 종료되기를 기다리는 다른 스레드에 전달할 값
			$ 실패하지 않는다.

		- 다른 스레드 종료하기
			========================================================================
			#include <pthread.h>

			int pthread_cancel(pthread_t thread);
			========================================================================
			$ thread로 명시한 스레드 ID를 가진 스레드에 취소 요청을 보낼 수 있다.
			$ 호출 성공: 0 반환 (취소 요청을 보내는 데 성공했다는 의미)
			$ 실제 종료는 비동기로 일어남.

		- 스레드는 취소 가능 / 불가능일 수 있다. (기본값은 취소 가능)
		- 취소 상태는 pthread_setcancelstate()를 통해 변경 가능
			========================================================================
			#include <pthread.h>

			int pthread_setcancelstate(int state, int *oldstate);
			========================================================================
			$ 호출 성공: 스레드의 취소 상태가 state 값으로 설정, 이전 상태는 oldstate에 저장
				# state 값
					@ PTHREAD_CANCEL_ENABLE (취소 가능)
					@ PTHREAD_CANCEL_DISABLE(취소 불가능)

		- 취소 타입은 비동기 / 유예 (기본값은 유예)
			$ 비동기 취소: 요청 들어온 이후 언제든지 스레드 종료 가능
			$ 유예: 안전한 특정 시점에서만 종료 가능
			========================================================================
			#include <pthread.h>

			int pthread_setcanceltype(int type, int *oldtype);
			========================================================================
			$ 취소 타입은 type 인자에 명시한 타입으로 설정, 이전 타입은 oldtype에 기록
				# type 값
					@ PTHREAD_CANCEL_ASYNCHRONOUS (비동기)
					@ PTHREAD_CANCEL_DEFERRED (유예)

	(7.7.7) 스레드 조인과 디태치
		- 스레드 조인(스레드의 종료를 동기화해야 한다)
			$ 조인은 스레드가 다른 스레드가 종료될 때까지 블록되도록 한다.
				========================================================================
				#include <pthread.h>

				int pthread_join(pthread_t thread, void **retval);
				========================================================================
				# 호출 성공: thread로 명시한 스레드가 종료될 때까지 블록
				# 스레드가 종료되면 호출한 스레드가 깨어나고 retval이 NULL이 아니면 그 값은 종료된 스레드가 pthread_exit()에 넘긴 값이거나 start_routine에서 반환한 값.
				# 에러: 0이 아닌 에러 코드 반환.
		- 하나의 스레드만 다른 스레드에 조인을 시도해야 한다.
		- 동시에 여러 스레드가 같은 스레드에 조인을 시도하면 안된다.

		- 스레드 디태치
			$ 조인이 가능치 않도록 디태치하는 것도 가능
			$ 조인할 생각이 없는 스레드는 디태치 해두어야 한다.
				========================================================================
				#include <pthread.h>

				int pthread_detach(pthread_t thread);
				========================================================================
				# 호출 성공: 명시한 스레드를 디태치, 0을 반환.
				# 에러: ESRCH 반환(thread 인자가 유효하지 않다)

		* join, detach는 한 프로세스 내의 스레드에 대해서 호출해야 리소스 해제 가능.
		* 프로세스가 종료되면 모든 스레드 리소스는 해제되지만, 명시적으로 조인 / 디태치하는 습관을 들이자!

	(7.7.8) 스레딩 예제

	(7.7.9) Pthread 뮤텍스
		- 뮤텍스는 대체로 정적으로 생성
		- 뮤텍스 초기화
			========================================================================
			/* 'mutex'라는 이름의 뮤텍스를 선언하고 초기화 */
			pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
			========================================================================
		
		- 뮤텍스 락 걸기
			=================================================================================
			#include <pthread.h>

			int pthread_mutex_lock(pthread_mutex_t *mutex); // pthread_mutex_lock(&mutex);
			=================================================================================
			$ 성공: 뮤텍스가 사용가능한 상태가 되면 호출한 스레드가 깨어나고 함수는 0을 반환.
			$ 에러: 0이 아닌 에러 코드 반환

		- 뮤텍스 해제하기
			=================================================================================
			#include <pthread.h>

			int pthread_mutex_unlock(pthread_mutex_t *mutex); // pthread_mutex_unlock(&mutex);
			=================================================================================
			$ 성공: mutex로 지정한 뮤텍스를 해제하고 0을 반환
			$ 에러: 0이 아닌 에러 반환.








