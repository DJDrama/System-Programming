[고급 파일 입출력(Advanced File I/O)]

(리눅스의 고급 입출력 시스템 콜(Advanced I/O System Calls))
- 벡터 입출력(Scatter/gather I/O): 한번의 호출로 여러 버퍼에서 데이터를 읽거나 쓸 수 있음(다양한 자료구조를 단일 I/O 트랜젝션으로 다룰 때 유용).
- epoll: Single Thread에서 수백 개의 fd를 poll 해야 하는 경우에 유용.
- 메모리맵 입출력(Memory-mapped I/O): 파일을 메모리에 맵핑해서 간단한 메모리 조작을 통해 파일 IO 수행(특정 패턴의 I/O에 유용).
- 파일 활용법 조언(File advice):프로세스에서 파일을 사용하려는 의도를 커널에게 제공할 수 있도록 하여, I/O 성능 향상.
- 비동기식 입출력(Asynchronous I/O): 스레들르 사용하지 않고, 동시에 입출력 부하가 많은 작업을 처리할 경우 유용.


1) 벡터 입출력(Scatter/Gather I/O)
	- 한번의 시스템 콜로 여러 개의 버퍼 벡터에 쓰거나 여러 개의 버퍼 벡터로 읽어 들일 때 사용하는 I/O 메서드.
	- scattered into(여러 버퍼 멕터로 흩뿌리거나), gathred from(여러 버퍼 벡터로부터 모으기)
		* Standard read and write 시스템 콜은 선형 I/O(Linear I/O)

	
	(선형 입출력에 비해 갖는 장점)
		
		> 더 자연스러운 코딩 패턴(More natural coding pattern)
			$ If data is naturally segmented(데이터가 자연스럽게 분리되어 있다면), 미리 정의된 구조체의 여러 필드에 걸쳐 데이터가 분리되어 있는 경우 벡터 입출력을 사용하면 직관적인 방법으로 조작 가능.
		
		> 효율(Efficiency)
			$ 여러 번의 선형 입출력 연산을 대체 할 수 있음.
		
		> 성능(Performance)
			$ 시스템 콜의 호출 횟수를 줄여줌.
			$ 여러 번의 선형 입출력 연산을 대체 할 수 있음.

		> 원자성(Atomicity)
			$ 벡터 입출력 연산 중에 다른 프로세스가 끼어들 여지가 없음(여러 번의 선형 입출력 연산과는 대조적).

	- readv()와 writev()
		> 벡터 입출력 시스템 콜
			$ readv()
				========================================================================
				#include <sys/uio.h>

				// fd에서 데이터를 읽어서 count 개수(count segments)만큼의 iov 버퍼에 저장.
				ssize_t readv(int fd, const struct iovec *iov, int count);
				========================================================================
				# 각 버퍼에 (iovec 구조체의)iov_len 바이트 만큼 채운 후 다음 버퍼를 채운다.

			$ writev()
				========================================================================
				#include <sys/uio.h>

				// count 개수만큼의 iov 버퍼에 있는 데이터를 fd에 기록.
				ssize_t writev(int fd, const struct iovec *iov, int count);
				========================================================================
				# (iovec 구조체의)iov_len 바이트만큼의 데이터를 모두 쓴 다음에 다음 버퍼의 내용을 기록한다.

		* read(), write()와 동일하게 동작하지만, 여러 개의 버퍼를 사용한다는 점에서 구분됨.

			$ iovec 구조체 (세그먼트라고 하는 독립적으로 분리된 버퍼)
				========================================================================
				#include <sys/uio.h>

				struct iovec {
					void *iov_base; /* 버퍼의 시작 포인터 */
					size_t iov_len; /* 버퍼 크기(바이트) */
				}
				========================================================================

				$ 벡터(vector): 이런 세그먼트의 집합
					# 벡터의 각 세그먼트에는 데이터를 기록하거나 읽어올 메모리 공간의 주소와 크기가 저장되어 있음.

		> 반환값
			$ 호출 성공: 읽거나 쓴 바이트 개수 반환(count*iov_len 값과 같아야 함)
			$ 에러: -1 반환, errno 설정
			$ read(), write() 시스템 콜에서 발생 가능한 모든 종류의 에러가 발생할 수 있으며 errno 설정.
				* 표준에서는 추가로 2가지의 에러 상황을 정의
					(1) count*iov_len 값이 SSIZE_MAX 값보다 큰 경우
						--> 데이터가 전송되지 않고 -1 반환
						--> errno는 EINVAL로 설정
					(2) count 값이 0보다 크고 <limits.h>에 정의된 IOV_MAX와 같거나 작아야 함.
						* 리눅스에서는 IOV_MAX=1024
						--> 만약 count가 0이면 readv(), writev()는 0을 반환
						--> 만약 count가 IOV_MAX보다 크면 데이터는 전송되지 않고 -1 반환, errno=EINVAL

		> 최적 count = 8
			$ 벡터 입출력 작업을 하는 동안 리눅스 커널에서는 각 세그먼트를 위한 내부 데이터 구조체를 반드시 할당함.
			$ count의 크기에 따라 동적으로 일어나지만, 최적화를 위해 리눅스 커널은 count 값이 크지 않을 경우 사용할 작은 세그먼트 배열을 스택에 
			  미리 만들어 둔다(세그먼트를 위한 동적 할당이 일어나지 않도록 하는 방법으로 성능 개선).
			$ 최적 값은 현재 8, 벡터 입출력 연산에 사용할 세그먼트 개수를 어느 정도로 할지 감이 오지 않을 때는 8이나 그보다 작은 크기로 먼저 
			  시도해보자.

		> 리눅스 커널 내부의 모든 입출력은 벡터 입출력이다.
			$ read(), write() 구현 역시 하나짜리 세그먼트를 가지는 벡터 입출력으로 구현되어 있다.

2) epoll
	- 리눅스 전용 시스템 콜.
	- poll(), select()는 실행할 때마다 전체 fd를 요구한다 --> fd의 크기가 클수록 모든 리스트를 다 검사해야하는 과정이 병목현상으로 작용.
	- epoll은 실제로 검사하는 부분과 검사할 fd를 등록하는 부분을 분리하여 병목현상 회피.
		========================================================================
		#include <sys/epoll.h>

		int epoll_create1(int flags);
		========================================================================
		> 호출 성공: 새로운 epoll 인스턴스 생성하고 연관된 파일 디스크립터를 반환.
		> flags: EPOLL_CLOSEXEC만 유효(새 프로세스가 실행될 때 이 파일을 자동적으로 닫아준다.)
		> 에러: -1 반환, errno 설정
			$ EINVAL:  잘못된 flags 인자
			$ EMFILE: 사용자가 열 수 있는 최대 파일 초과
			$ ENFILE: 시스템에서 열 수 있는 최대 파일 초과
			$ ENOMEM: 작업을 수행하기 위한 메모리가 부족

		* epoll_create1()에서 반환하는 fd는 폴링이 끝난 뒤 반드시 close() 시스템 콜로 닫아줘야 한다.

	- epoll 제어
		========================================================================
		#include <sys/epoll.h>

		int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
		========================================================================
		========================================================================
		struct epoll_event {
			__u32 events; /* events */
			union { // 멤버 변수끼리 메모리를 공유하는 것. (다른 멤버 변수에 값을 넣으면 기존의 값은 지워진다는 단점)
				void *ptr;
				int fd;
				__u32 u32;
				__u64 u64;
			} data;
		};
		========================================================================
		> 호출 성공: 해당 epoll 인스턴스는 epfd 파일 디스크립터와 연결된다. (0을 반환)
		> op: fd가 가리키는 파일에 대한 작업을 명시
			$ EPOLL_CTL_ADD: epfd와 연관된 epoll 인스턴스가 fd와 연관된 파일을 감시하도록 추가하며 각 이벤트는 event 인자로 정의.
			$ EPOLL_CTL_DEL: epfd와 연관된 epoll 인스턴스에 fd를 감시하지 않도록 삭제.
			$ EPOLL_CTL_MOD: 기존에 감시하고 있는 fd에 대한 이벤트를 event에 명시된 내용으로 갱신.
		> event: 그 작업의 동작에 대한 설명을 담고 있음.
		> epoll_event
			$ events: 주어진 fd에서 감시할 이벤트의 목록을 담고 있다.
				# EPOLLERR: 해당 파일에서 발생하는 에러 상황(따로 지정하지 않아도 항상 감시함)
				# EPOLLET: 파일을 감시할 때 에지 트리거를 사용(기본 동작은 레벨 트리거 방식)
				# EPOLLHUP: 파일에서 발생하는 행업(hangup)을 감시(따로 지정하지 않아도 항상 감시함)
				# EPOLLIN: 파일 읽기가 지연되지 않고 바로 가능한지 감시
				# EPOLLONESHOT: 이벤트 발생 후 파일을 한번 읽고 나면 더 이상 감시하지 않음. 다시 활성화하려면 EPOLL_CTL_MOD를 통해
								새로운 이벤트 값 설정해야 함.
				# EPOLLOUT: 파일 쓰기가 지연되지 않고 바로 가능한지 감시
				# EPOLLPRI: 즉시 읽어야 할 OOB* 데이터가 있는지 감시.
										(OOB: Out of Band: TCP에서 전송되는 데이터는 스트림 기반으로 전송측에서 보낸 순서대로 받게 되는데, 이 순서를 무시하고 보내는 메시지)
			$ data: 사용자 데이터를 위한 필드
				# 요청한 이벤트가 발생해서 사용자에게 반환될 때 이 필드에 담긴 내용은 함께 반환된다.
				(예: 이벤트가 발생했을 때 어떤 fd를 들여다 봐야 하는지 쉽게 확인하는 용도로 사용)
		> 에러: -1 반환, errno 설정
			$ EBADF: epfd가 유효한 epoll 인스턴스가 아니거나, fd가 유효한 fd가 아닐 경우
			$ EEXIST: op가 EPOLL_CTL_ADD인데 fd가 이미 epfd와 연결되어 있는 경우
			$ EINVAL: epfd가 epoll 인스턴스가 아니거나 epfd가 fd와 같을 경우, 또는 잘못된 op값 사용
			$ ENOENT: op가 EPOLL_CTL_MOD, 혹은 EPOLL_CTL_DEL인데 fd가 epfd와 연결되어 있지 않은 경우
			$ ENOMEM: 해당 요청을 처리하기에 메모리가 부족한 경우
			$ EPRM: fd가 epoll을 지원하지 않는 경우.

	- epoll로 이벤트 기다리기
		> epoll_wait(): epoll 인스턴스와 연관된 fd에 대한 이벤트를 기다린다.
		====================================================================================
		#include <sys/epoll.h>

		int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)
		====================================================================================
		> 호출 시, timeout 밀리 초 동안, epfd(epoll 인스턴스)와 연관된 파일의 이벤트를 기다린다.
		> 호출 성공: events에 대한 해당 이벤트, 파일이 읽기나 쓰기가 가능한 상태인지를 나타내는 epoll_event 구조체에 대한 포인터가 기록되며, 
				   최대 maxevents만큼의 이벤트가 기록된다, 발생한 이벤트 개수를 반환
				   # epoll_event 구조체의 
				   		-> events: 발생한 이벤트
				   		-> data: epoll_ctl()을 호출하기 전에 설정한 값
		> 에러: -1 반환, errno 설정.
			$ EBADF: epfd가 유효한 fd가 아니다.
			$ EFAULT: events가 가리키는 메모리에 대한 쓰기 권한이 없을 경우
			$ EINTR: 시스템 콜이 완료되거나, timeout을 초과하기 전에 시그널이 발생해서 동작이 멈춘 경우
			$ EINVAL: epfd가 유효한 epoll 인스턴스가 아니거나 maxevents가 0 이하인 경우
		> timeout이 0인 경우: 이벤트가 발생하지 않아도, epoll_wait()는 즉시 반환하며 반환값 = 0.
		> timeout이 -1인 경우: 이벤트가 발생할 때까지 해당 호출은 반환되지 않음.


	- 에지 트리거와 레벨 트릐거
		> epoll_ctl()에서 event인자의 events 필드를 EPOLLET으로 설정. -> 이벤트 모니터가 레벨 트리거가 아닌 에지 트리거로 동작.
		> poll(), select()가 동작하는 방식: 레벨 트리거
		> 에지 트리거: 논블록킹 입출력을 활용하도록 하는 다른 프로그래밍 접근 방식을 요구하며 EAGAIN을 주의 깊게 확인해야 함.

			$ 레벨 트리거: 신호가 인가되어 특정 레벨을 유지할 때 발생(이벤트의 상태에 관심(신호의 레벨))
				# epoll: fd가 읽기 가능한 상태가 되었을 때 알림을 받음(상태의 지속이 알림을 발생).

			$ 에지 트리거: 신호가 하강되거나 상승하는 동안 발생(이벤트 자체(신호가 움직이는)
				# epoll: 읽을 수 있는 첫 번째 데이터가 들어오면 알림을 받음(상태의 변화).

3) 메모리에 파일 맵핑하기
	- mmap()	
		> 표준 파일 입출력의 대안으로 파일을 메모리에 맵핑할 수 있는 인터페이스
		> 메모리 주소와 파일 워드 사이에 일대일 대응
		> 메모리 주소에 직접 쓰는 것만으로 디스크에 있는 파일에 기록 가능.
		====================================================================================
		#include <sys/mman.h>

		void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
		====================================================================================
		> addr: 매핑할 메모리의 주소
      		$ 주소를 직접 지정하거나 그렇지 않을 경우 NULL 사용.
      		$ NULL이 아닌 경우, 커널은 addr에 지정된 값의 근처 메모리 영역을 페이지 단위로 사용.
      		$ NULL을 지정하면 시스템이 가장 적합한 메모리로 데이터를 매핑.
      		$ 대부분 0을 넘김.		
     	> length: 메모리 공간의 크기(매핑할 메모리 공간의 크기 지정)
      		$ 반드시 0보다 커야 함.
      		$ 파일 전체를 매핑할 경우 파일 크기를 지정.
     	> prot: 보호 모드(읽기, 쓰기 등 보호 모드 지정 - OR 연산자 가능)
      		$ PROT_READ: 매핑된 파일을 읽기만 함.
      		$ PROT_WRITE: 매핑된 파일에 쓰기를 허용(flags 인자에 MAP_PRIVATE를 지정하거나 파일을 쓰기 가능 상태로 열어야 함)
      		$ PROT_EXEC: 매핑된 파일을 실행할 수 있음.
      		$ PROT_NONE: 매핑된 파일에 접근할 수 없다.
    	> flags: 매핑된 데이터의 처리 방법 지정 상수(읽어온 데이터를 처리하기 위한 정보를 지정 - OR 연산자 가능)
      		$ MAP_SHARED: 다른 프로세스와 데이터 변경 내용 공유, 쓰기 동작은 매핑된 메모리의 내용을 변경.
      		$ MAP_SHARED_VALIDATE: MAP_SHARED와 같으나, 전달받은 플래그를 커널이 모두 확인하고 모르는 플래그가 있을 경우 오류로 취급.
      		$ MAP_PRIVATE: 데이터의 변경 내용을 공유하지 않음. (MAP_SHARED와 MAP_PRIVATE 플래그 중 하나는 반드시 지정해야 함, 둘 다 사용 X)
      		$ MAP_ANONYMOUS: fd를 무시하고 할당된 메모리 영역을 0으로 초기화. offset은 0이어야 함.
      		$ MAP_ANON: MAP_ANONYMOUS와 동일한 플래그, 다른 시스템과의 호환성을 위해 제공.
      		$ MAP_FIXED: 매핑할 주소를 정확히 지정.
      		$ MAP_NORESERVE: 스왑 영역을 할당하지 않는다.(MAP_PRIVATE를 지정하면 시스템은 매핑에 할당된 메모리 공간만큼 스왑 영역을 할당. 이 스왑 영역은 매핑된 데이터의 사본을 저장하는 데 사용)
      			* fd를 맵핑하면 해당 파일의 참조 카운터가 증가한다.
      			* 파일 맵핑 후 fd를 닫더라도 프로세스는 여전히 맵핑된 주소에 접근 가능.
      			* 참조 카운터는 파일의 맵핑을 해제하거나 프로세스가 종료될 때 감소.
    	> fd: 파일 기술자
    	> offset: 파일 오프셋

    	* addr, offset 인자는 페이지 크기 단위로 정렬되어야 함(페이지 크기의 정수배가 되어야 한다.)

    	(페이지 크기)
    	> 페이지: 메모리 관리 유닛(MMU: Memory Management Unit)에서 사용하는 최소 단위
    		$ 별도의 접근 권한과 동작 방식을 따르는 가장 작은 메모리 단위
    		$ 메모리 맵핑을 구성하는 블록이자 프로세스 주소 공간을 구성하는 블록

    	> sysconf(): 페이지 크기를 얻을 수 있는 POSIX의 표준 메서드 (호환성을 고려할 때 최선의 방법)
    	  ====================================================================================
    	  #include <unistd.h>

    	  long sysconf(int name);
    	  ====================================================================================
    		$ 설정 항목 name의 값을 반환, name이 유효하지 않으면 -1 반환.
    		$ 에러 발생 시 errno는 EINVAL
    		$ 어떤 항목에서는 -1이 유효한 값일 수 있으므로 호출하기 전에 errno를 초기화하고, 호출 후에 이 값을 다시 검사해라.

    	> _SC_PAGESIZE(또는 _SC_PAGE_SIZE)
    		$ 페이지 크기를 바이트 단위로 정의
    		====================================================================================
    		long page_size = sysconf(_SC_PAGESIZE); // 런타임에 페이지 크기를 구하는 방법
    		====================================================================================
    		
    		$ 리눅스
    		====================================================================================
    		#include <unistd.h>

    		int getpagesize(void); // 바이트 단위의 페이지 크기 반환.

	    	// 예) int page_size = getpagesize();
    		====================================================================================

    		$ 페이지 크기는 <sys/user.h>에 정의된 PAGE_SIZE 매크로에도 정적으로 저장되어 있다.
			====================================================================================
			int page_size = PAGE_SIZE;    		
			====================================================================================

		(반환값과 에러)
		* mmap()은 절대 0을 반환하지 않는다.
		> 호출 성공: 맵핑된 주소 반환
		> 실패: MAP_FAILED 반환, errno 설정
			$ EACCES: fd가 일반 파일이 아니거나 파일이 prot이나 flags인자와 충돌을 일으키는 모드로 열림.
			$ EAGAIN: 파일 락으로 파일이 잠긴 상태
			$ EBADF: 주어진 fd가 유효하지 않음.
			$ EINVAL: addr, len, off 중 하나 이상의 인자가 유효하지 않음.
			$ ENFILE: 시스템에서 열 수 있는 파일 개수 제한에 걸림.
			$ ENODEV: 파일 시스템에서 해당 파일에 대한 메모리 맵핑을 지원하지 않음.
			$ ENOMEM: 프로세스에 사용 가능한 메모리가 부족.
			$ EOVERFLOW: addr+len 값이 주소 공간의 크기를 초과.
			$ EPERM: PROT_EXEC가 설정 되었지만, 파일시스템이 noexec 모드로 마운트됨.

		(관련 시그널)
		> SIGBUS: 프로세스가 더 이상 유효하지 않은 맵핑 영역에 접근하려고 할 때
		> SIGSEV: 프로세스가 읽기 전용으로 맵핑된 영역에 쓰려고 할 때

	- munmap()
		> 생성한 맵핑 해제.
		====================================================================================
		#include <sys/mman.h>

		void munmap(void *addr, size_t len);

		// 예) if(munmap(addr, len)==-1) perror("munmap");
		====================================================================================
		> 페이지 크기로 정렬된 addr에서 시작해서 len 바이트 만큼 이어지는 프로세스 주소 공간 내에 존재하는 페이지를 포함하는 맵핑을 해제.
		> 해제 후 접근 시, SIGSEGV 시그널 발생.
		> mmap()의 반환값과 mmap()을 실행할 때 사용했던 len 값을 munmap()의 인자로 전달.
		> 성공: 0 반환
		> 실패: -1 반환, errno 설정.
			$ EINVAL: 주어진 인자가 유효하지 않을 경우.

	- mmap의 장점
		1. read()나 write() 시스템 콜을 사용할 때 발생하는 불필요한 복사(사용자 영역의 버퍼로 데이터를 읽고 써야 하는)를 방지할 수 있다.
		2. 파일을 읽고 쓰는 데 시스템 콜 호출이나 컨텍스트 스위칭 오버헤드가 발생하지 않음.
		3. 여러 개의 프로세스가 같은 객체를 메모리에 맵핑 시, 데이터는 모든 프로세스 사이에서 공유됨. 읽기전용, MAP_SHARED 모드로 쓰기가 가능하게 맵핑된 객체는 전체가 공유됨.
		4. lseek() 같은 시스템 콜을 사용하지 않고도, 간단한 포인터 조작만으로 맵핑 영역 탐색 가능.

	- mmap의 단점
		1. 메모리 맵핑은 항상 페이지 크기의 정수배만 가능 -> 파일 크기와 페이지 크기의 정수배 차이만큼의 공간이 낭비됨(크기가 작은 파일이 많다면 맵핑 대문에 낭비되는 공간의 비율 높아짐)
		2. 메모리 맵핑은 반드시 프로세스의 주소 공간 내에 있어야 함. 수많은 맵핑 사용 시, 주소 공간의 파편화를 초래하여 크고 연속된 비어 있는 공간을 찾기 어려워진다.
		3. 메모리 맵핑과 관련 자료구조를 커널 내부에서 생성, 유지하는 데 오버헤드가 발생.(이중 복사를 제거하는 방법으로 방지 가능)

	* 맵핑하려는 파일의 크기가 크거나, 전체 크기가 페이지 크기로 딱 맞아 떨어질 때 장점 극대화 가능.

	- 맵핑 크기 변경하기
		> 맵핑 영역 크기 확장, 축소를 위한 함수
		====================================================================================
		#define _GNU_SOURCE

		#include <sys/mman.h>
		void *mremap(void *addr, size_t old_size, size_t new_size, unsigned long flags);
		====================================================================================
		> [addr, addr+old_size)에 맵핑된 영역을 new_size만큼의 크기로 변경.
		> 프로세스의 주소 공간에서 사용가능한 공간과 flags 값에 따라 맵핑된 위치 변경 가능.
		> flags: 0 또는 MREMAP_MAYMOVE(크기 변경 요청을 수행할 때 맵핑의 위치 이동해도 괜찮다고 커널에게 알려주는 플래그)

		> 반환값과 에러 코드
			$ 성공: 크기가 조정된 메모리 맵핑의 시작 주소 반환.
			$ 실패: MAP_FAILED 반환, errno 설정
				# EAGAIN: 메모리 영역에 락이 설정되어 있어 크기 변경이 불가능
				# EFAULT: 주어진 구간 내 몇몇 페이지가 프로세스 주소 공간에서 유효하지 않은 페이지, 페이지를 다시 맵핑하는 데 문제 발생
				# EINVAL: 인자가 유효하지 않음.
				# ENOMEM: MREMAP_MAYMOVE가 명시되지 않은 상태에서 주어진 영역을 확장할 수 없거나 프로세스의 주소 공간에 남은 공간이 충분치 않다.

	- 맵핑의 보호 모드 변경하기
		> 메모리 영역에 대한 접근 권한 변경
		====================================================================================
		#include <sys/mman.h>

		int mprotect(const void *addr, size_t len, int prot);
		====================================================================================
		> [addr, addr+len) 영역 내 포함된 메모리 페이지의 보호 모드 변경.
		> prot: PROT_NONE, PROT_READ, PROT_WRITE, PROT_EXEC
		> 성공: 0 반환
		> 실패: -1 반환, errno 설정
			$ EACCESS: 메모리 영역을 prot 값으로 설정할 수 있는 권한이 없음(읽기 전용으로 열린 파일의 맵핑을 쓰기 가능하도록 설정).
			$ EINVAL: addr 인자가 유효하지 않거나 페이지 크기로 정렬되어 있지 않음.
			$ ENOMEM: 커널 메모리가 충분치 않거나 주어진 메모리 영역 중 한 페이지 이상이 프로세스 주소 공간에서 유효하지 않음.

	- 파일과 맵핑의 동기화
		> fsync() 시스템 콜의 메모리 맵핑 버전인 msyc()
		====================================================================================
		#include <sys/mman.h>

		int msync(void *addr, size_t len, int flags);

		// 예) if(msync(addr, len, MS_ASYNC)==-1) perror("msync"); // [addr, addr_len) 영역에 맵핑된 파일을 디스크로 동기화(fsync()에 비해 10배 빠름)
		====================================================================================
		> 맵핑된 파일에 대한 변경 내용을 디스크에 기록하여 파일과 맵핑을 동기화.
		> addr에서부터 len 바이트만큼 맵핑된 파일이나 파일의 일부를 디스크로 동기화.
		> addr 인자는 반드시 페이지 크기로 정렬되어야 하며 보통은 mmap()에서 반환한 값을 사용.
		* msync() 사용하지 않을 경우, 맵핑이 해제되기 전까지는 맵핑된 메모리에 쓰여진 내용이 디스크로 반영된다는 보장을 할 수 없다.

		> flags(동기화 방식 제어, OR 사용 가능)
			$ MS_SYNC : 디스크에 모든 페이지 기록 전까지 mysnc()는 반환하지 않음.
			$ MS_ASYNC: 비동기식으로 동기화. mysnc()는 디스크에 페이지가 기록될 때까지 기다리지 않고 즉시 반환.
			$ MS_INVALIDATE: 맵핑의 캐시 복사본을 모두 무효화. 

		> 반환값과 에러 코드
			$ 성공: 0
			$ 실패: -1, errno 설정
				# EINVAL: flags 인자에 MS_SYNC, MS_ASYNC가 같이 쓰였거나, 유효한 flags 값이 아닐 경우, addr이 페이지 크기에 맞춰져 있지 않음.
				# ENOMEM: 주어진 메모리 영역이 맵핑되지 않음.

	- 맵핑의 사용처 알려주기
		> 프로세스가 맵핑을 어떻게 사용할 것인지 커널에 알려주는 madvise()
		====================================================================================
		#include <sys/mman.h>

		int madvise(void *addr, size_t len, int advice);

		// 예)
		// int ret;
		// ret = madvise(addr, len, MADV_SEQUENTIAL);  // 메모리 영역을 [addr, addr+len) 순차적으로 접근할 것이라고 커널에게 알려줌.
		// if(ret < 0) perror("madvise");
		====================================================================================
		> addr로 시작해서 len 바이트의 크기를 가지는 메모리 맵핑 내의 페이지와 관련된 동작 방삭에 대한 힌트를 커널에게 제공.
		> len이 0이면, 커널은 addr에서 시작하는 전체 맵핑에 힌트를 적용.
		> advice
			$ MADV_NORMAL: 특별한 힌트 제공하지 않음. 일반적인 영역으로 취급.
			$ MADV_RANDOM: 영역의 페이지는 랜덤하게 접근.
			$ MADV_SEQUENTIAL: 영역의 페이지는 낮은 주소에서 높은 주소로 순차적으로 접근.
			$ MADV_WILLNEED: 영역의 페이지는 곧 접근.
			$ MADV_DONTNEED: 영역의 페이지는 당분간 접근하지 않음.

		* 미리읽기(readahead)
			$ 파일 조각에 대해서 읽기 요청이 들어오면 커널은 그다음 영역도 미리 읽는다.
			$ 디스크에는 트랙버퍼(하드 디스크는 기본적으로 내부적으로 미리읽기를 수행)
			$ 파일은 디스크에 순차적으로 저장되어 있는 경우가 일반적이므로 최적화는 적은 비용으로 큰 효과를 볼 수 있음.

		> 반환값과 에러 코드
			$ 성공: 0
			$ 에러: -1, errno
				# EAGAIN: 커널 내부의 자원이 사용 불가능.
				# EBADF: 맵핑 영역은 존재하지만 파일을 맵핑하고 있지 않다.
				# EINVAL: len 인자가 음수거나, addr이 페이지 크기에 정렬되지 않았거나, advice 인자가 유효하지 않거나, 페이지가 잠겨있거나 MADV_DONTNEED로 공유되어 있음.
				# EIO: MADV_WILLNEED를 지정한 상황에서 내부 입출력 에러 발생.
				# ENOMEM: 주어진 영역이 프로세스의 주소 공간에서 유효한 맵핑이 아니거나, MADV_WILLNEED가 주어졌지만 해당 영역에 페이지를 할당할 메모리가 불충분.

4) 일반 파일 입출력에 대한 힌트
	- 커널에 일반적인 파일 입출력에 대한 힌트를 제공하는 방법
	- posix_fadvise() 시스템 콜
		====================================================================================
	  	#include <fcntl.h>

	  	int posix_fadvise(int fd, off_t offset, off_t len, int advice);

	  	// 예) 
	  	// int ret;
	  	// ret = posix_fadvise(fd, 0, 0, POSIX_FADV_RANDOM);
	  	// if(ret==-1) perror("posix_fadvise");
	  	====================================================================================
	  	> fd의 [offset, offset+len) 범위에 대한 힌트를 커널에 제공.
	  	> len이 0이면 힌트는 파일 전체인 [offset, 파일 길이]에 적용.
	  	> 일반적인 사용법: len과 offset 값을 0으로 넘겨서 전체 파일에 대한 힌트를 제공.
	  	> advice(하나만 설정 가능)
	  		$ POSIX_FADV_NORMAL: 힌트 제공하지 않음. 평범하게 취급
	  		$ POSIX_FADV_RANDOM: 지정된 범위 내에 있는 데이터에 랜덤하게 접근
	  		$ POSIX_FADV_SEQUENTIAL: 지정된 범위 내에 있는 데이터에 낮은 주소에서 높은 주소로 순차적 접근
	  		$ POSIX_FADV_WILLNEED: 지정된 범위 내에 있는 데이터에 곧 접근
	  		$ POSIX_FADV_NOREUSE: 지정된 범위 내에 있는 데이터에 곧 접근하지만 한번만 접근
	  		$ POSIX_FADV_DONTNEED: 지정된 범위 내에 있는 데이터는 당분간 접근하지 않는다.

	  		(현재 버전)
	  		$ POSIX_FADV_NORMAL: 적당히 미리읽기를 한다.
	  		$ POSIX_FADV_RANDOM: 커널에서 미리읽기를 하지 않고 매번 물리적인 읽기마다 최소한의 데이터만 읽음.
	  		$ POSIX_FADV_SEQUENTIAL: 커널은 공격적으로 미리읽기를 수행하며 미리읽기 윈도우의 크기를 두 배로 늘림
	  		$ POSIX_FADV_WILLNEED: 커널이 미리읽기를 활성화하고 주어진 페이지를 메모리로 읽어들임.
	  		$ POSIX_FADV_NOREUSE: 현재는 POSIX_FADV_WILLNEED와 똑같이 동작. ('한 번만 사용한다'는 동작 방식을 활용하는 추가적인 최적화를 수행할지도 모름)
	  		$ POSIX_FADV_DONTNEED: 커널은 주어진 범위 내의 데이터 중 캐싱 중인 데이터를 페이지 캐시에서 제거.

	  	> 반환값과 에러 코드
	  		$ 성공: 0 반환
	  		$ 실패: -1 반환, errno 설정
	  			# EBADF: 주어진 파일 디스크립터 유효하지 않음.
	  			# EINVAL: advice가 유효하지 않음, fd가 파이프를 가리키거나, 명시한 advice를 지정한 파일에 적용할 수 없음.

	- readahead() 시스템 콜
	 	> 리눅스 전용 인터페이스
	 	====================================================================================
	  	#define _GNU_SOURCE
	  	
	  	#include <fcntl.h>

	  	ssize_t readahead(int fd, off64_t offset, size_t count);
	  	====================================================================================
	  	> fd가 가리키는 파일의 [offset, offset+count) 영역의 페이지 캐시를 생성한다.

	  	> 반환값과 에러 코드
	  		$ 성공: 0 반환
	  		$ 실패: -1 반환, errno 설정
	  			# EBADF: 주어진 fd가 유효하지 않음 or 읽기가 가능하도록 열리지 않음.
	  			# EINVAL: 주어진 fd가 미리읽기를 지원하는 파일에 맵핑되지 않음.

	* 부담없이 힌트를 사용하자!
		> 힌트는 애플리케이션에서 발생하는 입출력의 부하를 완화시킨다.(하드 디스크는 매우 느리고 최신 프로세서는 매우 빠르므로 적절한 힌트는 도움이 된다.)
			예)
			1. 파일 조각을 읽기 전에 POSIX_FADV_WILLNEED 힌트 제공: 커널이 읽으려는 파일을 페이지 캐시에 밀어 넣을 수 있다.
				--> 입출력은 백그라운드에서 비동기식으로 일어나며, 앱이 최종적으로 파일에 접근하면 입출력을 블록킹하지 않고 원하는 작업을 완료 할 수 있다.
			2. 비디오 스트리밍 앱의 경우 주기적으로 캐시에서 스트림 데이터를 제거하도록 POSIX_FADV_DONTNEED 힌트를 커널에 넘겨 준다.
			3. 파일 전체를 읽을 때 POSIX_FADV_SEQUENTIAL 힌트를 사용해 커널에 미리읽기를 공격적으로 수행하도록 할 수 있다.
			4. 파일을 랜덤하게 접근하거나 파일의 이곳저곳을 읽어야 한다면 POSIX_FADV_RANDOM 힌트를 사용해서 불필요한 미리읽기가 발생하지 않도록 할 수 있다.

5) 동기화, 동기식, 비동기식 연산
	- 동기 / 비동기
		(synchronous - 동기식)
		> 동기식 쓰기 연산: 쓰고자 하는 데이터가 커널의 버퍼 캐시에 기록되기 전까지는 반환되지 않음.
		> 동기식 읽기 연산: 읽고자 하는 데이터가 앱에서 제공하는 사용자 영역의 버퍼에 저장되기 전까지는 반환되지 않음.

		(asynchronous - 비동기식)
		> 비동기식 쓰기 연산: 데이터가 사용자 영역에 머무르고 있을지라도 즉시 반환될 수 있음.
		> 비동기식 읽기 연산: 데이터가 미쳐 준비되기도 전에 반환될 수 있음.
			* 연산이 완료되었는지, 어느 정도나 수행했는지 확인할 수 있는 어떤 메커니즘이 반드시 존재해야 함.

		(syncrhonized - 동기화)
		> 동기식 보다 더 안전(다소 제약적)
		> 동기화 쓰기 연산: 데이터를 디스크에 기록, 커널 버퍼에 있던 데이터와 디스크에 기록된 데이터가 동기화되도록 보장.
		> 동기화 읽기 연산: 항상 데이터의 최신 복사본을 반환하며 복사본은 디스크에서 읽어낼 가능성이 높음.
			--> 동기식 / 비동기식: 입출력 연산이 반환하기 전에 어떤 이벤트를 기다리는지의 여부를 나타냄
			--> 동기화 / 비동기화: 어떤 이벤트가 발생해야 함을 나타냄. 

	- 비동기식 입출력
		(aio 라이브러리)
		> 비동기식 입출력을 요청하고 작업이 완료되면 알림을 받는 함수를 제공.

6) 입출력 스케줄러와 성능
	- 디스크와 시스템의 나머지 부분 간의 상대적인 성능 차이가 상당히 큼.
	- 디스크의 성능을 가장 심각하게 떨어뜨리는 부분은 탐색
	- 입출력 스케줄러: 입출력 요청의 순서와 시간을 조작하는 방법으로 디스크 탐색 횟수를 최소화.

	- 디스크 주소 지정 방식
		> 하드디스크
			$ 실린더, 헤드, 섹터 또는 CHS(Cylinder, Head, Sector) 주소 방식을 사용.
			$ 플래터 여러 장으로 구성되어 있으며, 각 플래터는 하나의 디스크, 스핀들, 읽기/쓰기 헤더로 구성.
			$ 각 플래터는 CD처럼 원형의 트랙으로 나뉘어져 있다.

		> 특정 데이터가 저장되어 있는 디스크의 위치를 찾을 때 하드디스크는 실린더, 헤드, 섹터 값을 필요.
			$ 실린더 값: 데이터가 위치한 트랙을 나타냄(각 디스크의 중심에서 같은 거리만큼 떨어져 있는 트랙을 나타냄)
			$ 헤드 값: 요청한 읽기/쓰기 헤드(정확한 플래터)의 정확한 값을 구분.
			$ 섹터 값: 이를 사용해서 트랙에 위치한 정확한 섹터를 찾는다. --> 탐색 완료!

			* 하드 디스크는 데이터를 찾기 위해 어떤 플래터의 어느 트랙, 어느 섹터에 데이터가 있는 지 알아야 한다.

		> 요즘 나온 하드디스크
			$ 유일한 블록 번호(물리 블록 혹은 디바이스 블록)를 모든 실린더/헤드/섹터에 맵핑해서 하나의 블록이 특정 섹터에 대응되도록 한다.
			$ [논리 블록 주소 지정(LBA: Logical Block Addressing)]
				# 현대적인 운영체제는 위 블록 번호를 이용해 하디 디스크의 주소를 지정.
				# 하드 디스크는 내부적으로 이 블록 번호를 가지고 올바른 CHS 주소로 변환한다.
				# 논리 블록 n과 n+1은 디스크에서 물리적으로 인접하는 경향이 있다.

		> 파일 시스템은 소프트웨어로만 존재한다.
			$ 논리 블록이라고 하는 독자적인 단위를 사용해서 동작
			$ 논리 블록의 크기는 물리적인 블록 크기의 정수배가 되어야 함.
				--> 논리 블록은 하나 이상의 디스크의 물리 블록에 맵핑되어 있다.

	- 입출력 스케줄러의 동작 방식
		> 병합과 정렬
			$ 병합: 둘 이상의 인접한 입출력 요청을 단일 요청으로 합치는 과정.
			$ 정렬: 대기 중인 입출력 요청을 블록 순서의 오름차순으로 정렬하는 것.

			--> 디스크의 헤드 움직임을 최소화 한다.(탐색은 디스크 입출력에서 가장 오랜 시간이 걸리는 과정)

	- 읽기 개선
		> 읽기 요청은 반드시 최신 데이터를 반환해야 한다.
		> 레이턴시(Latency)
			$ 디스크에서 데이터를 읽어올 때까지 블록되어야 하는 시간이 오래 걸리는 작업.
		> 굶겨 죽이는 문제(writes-starving-reads problem)
			$ 50번 블록에 대한 새로운 요청이 들어오면 109번 블록에 대한 요청은 절대 처리하지 못하는 예

		* 리누스 엘리베이터: 대기중인 입출력 요청을 정렬된 목록으로 유지

		(해결책)
		1. 데드라인 입출력 스케줄러(Deadline I/O Scheduler)
			> 큐에 읽기 FIFO 큐와 쓰기 FIFO 큐 두가지 추가 큐를 도입
			> 각 아이템은 큐에 들어온 시간에 다라 정렬
			> 읽기 FIFO 큐: 읽기 요청만 담음
			> 쓰기 FIFO 큐 : 쓰기 요청만 담음
			> 각 요청의 만료기간
				$ 읽기: 500밀리 초
				$ 쓰기: 5초
			> 표준 큐가 블록 번호로 정렬되어 있으므로 탐색을 최소화 -> 전체 처리량 최대로 높임.

			* 요청이 만료되기 전에 처리된다는 보장은 할 수 없지만, 거의 요청 만료시간 안에 요청을 처리한다.

		2. 예측 입출력 스케줄러(Anticipatory I/O Scheduler)
			> 데드라인 입출력 스케줄러에 "에측 메커니즘" 추가.
			> 요청을 처리한 후 아무것도 하지 않고 6밀리 초까지 기다린다.(6밀리 초: 앱이 파일시스템의 동일한 부분에 대한 새로운 읽기를 요청할 충분한 시간.)
			> 기다리는 동안 새로운 요청이 들어오면 해당 읽기 요청은 즉시 처리되고 예측 입출력 스케줄러는 좀 더 기다린다.

		3. CFQ 입출력 스케줄러(Complete Fair Queuing I/O Scheduler)
			> 독자적인 큐를 할당, 각 큐는 시간을 할당받음.
			> 라운드로빈 방식으로 각 큐를 순회하면서 그 큐에 허락된 시간이 다 지나거나 요청이 더 이상 남아 있지 않을 때까지 그 큐에 있는 요청을 처리.
			> 동기화된 요청은 동기화되지 않은 요청보다 더 높은 우선순위를 가진다.

		4. Noop 입출력 스케줄러(Noop I/O Scheduler)
			> 가장 기본적인 스케줄러
			> 정렬을 수행하지 않고 기본적인 병합만 수행.
			> 정렬할 필요가 없거나 정렬을 하지 않는 장치에 특화된 스케줄러.
			> 플래시 메모리와 같은 완전히 random-access인 장치들을 위한 스케줄러.
			> SSD에 사용.

			> 스케줄러 설정 방법
				$ iosched를 통해 선택(cfq, deadline, noop)
				$ /sys/block/[device]/queue/scheduler
					# echo dfq > /sys/block/sda/queue/scheduler // sda 장치에 CFQ 스케줄러를 설정

	- 입출력 성능 최적화
		> 사용자 영역에서 입출력 스케줄링하기
			1. 경로로 정렬하기
				$ 적은 방법으로 블록 단위 정렬을 흉내내는 방식.
				$ 완전히 다른 파일시스템에 존재하는 두 파일보다 같은 디렉터리에 존재하는 두 파일이 디스크에서 인접해 있을 확률이 높다는 사실은 분명하다.
					# 단점: 파편화를 고려하지 않았다는 것.

			2. inode로 정렬하기
				$ inode: 개별 파일과 관련된 메타데이터를 담고 있는 유닉스의 구성 요소.
				(장점)
				(1) inode 번호는 쉽게 얻을 수 있고 정렬하기 쉽다.
				(2) 물리적인 파일 배치를 추측할 수 있는 좋은 지표다.
				
				(단점)
				(1) 파편화에 따라 추측이 틀릴 수 있다.
				(2) 유닉스 파일시스템이 아닌 경우 정확도가 떨어진다.

			3. 물리 블록으로 정렬하기
				$ 파일은 파일시스템에서 가장 작은 할당 단위인 논리 블록 단위로 쪼개진다.
				$ 논리 블록은 하나의 물리 블록에 맵핑되어 있다.
				$ 파일이 차지하고 있는 논리 블록의 번호를 찾아내서 어떤 물리 블록에 맵핑되어 있는지 확인하고 이를 기반으로 정렬하는 것.
				$ 파일의 논리 블록에서 물리 디스크 블록을 알아내는 메서드.
				  	==========================================
				  	ret = ioctl(fd, FIBMAP, &block);
				  	if(ret<0) perror("ioctl");
				  	==========================================
				  	# block: 찾고 싶은 물리 블록에 대한 논리 블록. (인자로 전달하는 block: 0부터 시작하는 파일에 상대적인 값)
				  		* 파일이 8개의 논리 블록으로 이루어져 있다면, 유효한 block 값은 0~7.
				  	# 호출 성공: block은 물리 블록 번호로 바뀐다.
				$ 논리 블록과 물리 블록의 맵핑을 찾기
					(1) 주어진 파일의 블록 개수를 구한다.
					(2) 각 논리 블록을 가지고 ioctl() 요청을 통해 상응하는 물리 블록을 구한다.

				* FIBMAP의
					(단점)
					# root 권한이 필요한 CAP_SYS_RAWIO 기능을 요구(root 권한 없이 사용 불가 --> ioctl()은 EINVAL 을 반환)

					(장점)
					# 정확히 정렬하고 싶은 대상인, 파일이 실제 존재하는 물리 디스크 블록을 반환한다는 점.













    		









